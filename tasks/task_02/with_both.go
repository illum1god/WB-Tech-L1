package main

import (
	"fmt"
	"sync"
)

func main() {
	// Исходный массив чисел
	numbers := []int{2, 4, 6, 8, 10}

	// Создаем канал для передачи результатов вычислений
	results := make(chan string, len(numbers)) // Буферизированный канал

	// Создаем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Итерируемся по каждому числу в массиве
	for _, num := range numbers {
		wg.Add(1) // Увеличиваем счетчик WaitGroup перед запуском новой горутины

		// Запускаем горутину для вычисления квадрата числа
		go func(n int) {
			defer wg.Done() // Обозначаем завершение горутины

			// Вычисляем квадрат числа
			square := n * n

			// Формируем строку с результатом
			result := fmt.Sprintf("Квадрат числа %d равен %d", n, square)

			// Отправляем результат в канал
			results <- result
		}(num) // Передаем текущий num как аргумент для избежания гонки данных
	}

	// Запускаем отдельную горутину для закрытия канала после завершения всех вычислений
	go func() {
		wg.Wait()      // Ждем завершения всех горутин
		close(results) // Закрываем канал
	}()

	// Читаем и выводим результаты из канала по мере их появления
	for res := range results {
		fmt.Println(res)
	}
}
