package main

import (
	"fmt"
	"sync"
)

func main() {
	// Исходная последовательность чисел
	numbers := []int{2, 4, 6, 8, 10}

	// Создаем канал для передачи квадратов чисел
	squares := make(chan int, len(numbers)) // Буферизированный канал

	// Создаем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Итерация по каждому числу в массиве
	for _, num := range numbers {
		wg.Add(1) // Увеличиваем счетчик WaitGroup перед запуском новой горутины

		// Запускаем горутину для вычисления квадрата числа
		go func(n int) {
			defer wg.Done() // Обозначаем завершение горутины

			square := n * n // Вычисляем квадрат числа

			// Отправляем результат в канал
			squares <- square
		}(num) // Передаем текущий num как аргумент для избежания гонки данных
	}

	// Запускаем отдельную горутину для закрытия канала после завершения всех вычислений
	go func() {
		wg.Wait()      // Ждем завершения всех горутин
		close(squares) // Закрываем канал
	}()

	totalSum := 0 // Переменная для хранения суммы квадратов

	// Читаем квадраты из канала и суммируем их
	for square := range squares {
		totalSum += square // Добавляем квадрат числа к общей сумме
	}

	// Выводим итоговую сумму квадратов
	fmt.Printf("Сумма квадратов чисел %v равна %d\n", numbers, totalSum)
}
